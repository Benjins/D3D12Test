
 - make user-defined funcs and structs and use them
 - if statements and for loops
 - ddx/ddy, clip or abort (kinda like GLSL discard)
 - hack shader AST generation to have less stripped code
 - generate DXBC or DXIL directly to better exercise lower-level compiler
 - Switch to dxcapi.h and dxcompiler.lib and use DXIL
 - config so we can choose debug shaders or nah, which adapter to use, etc.
 - generate valid shader -> mutate it so it's incorrect, and verify that the compiler rejects it (i.e. doesn't crash)
 - generate compute shaders
 - actually run shaders, possibly will require some constraints on them to make sure pixel shader would actually run
 
 
Follow-ups:
 - Look at commits 60b3a2b2f9ad9947fdc169a7b4149f96e3c5c2ed and its parent b0360551b906e5478d01e9ce48dace4467ec51de...the parent has a bug (in user code) but it wasn't caught by validation. What happens if we hammer on it?
 - If we continuously allocate descriptor heaps but never release them, we get an access violation. What might that be?




